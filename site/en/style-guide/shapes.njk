---
title: Shapes
---

<p>Shapes can be added through a <a href="https://web.dev/houdini-how/">Houdini paint worklet</a>. To use them as backgrounds, add <code>background-image: paint(shape)</code> to any component. The shape worklet makes use of the following custom properties:</p>
<dl>
  <dt class="type--lower"><code>--shape</code></dt>
  <dd>The shape to draw. Valid values are <code>triangle</code>, <code>circle</code>, and <code>moon</code></dd>
  <dt class="type--lower"><code>--shape-color</code></dt>
  <dd>The color to fill the shape. Any valid color is allowed, including use of CSS variables (for instance <code>var(--primary-blue)</code></dd>
  <dt class="type--lower"><code>--shape-size</code></dt>
  <dd>The size to draw the shape, in the form of <code>(width height)</code>. Width and height can either be a <code>px</code> value or a <code>%</code> value, with the later being a percentage of the element's respective width or height. Whichever is the smallest value between height and width will be used.</dd>
  <dt class="type--lower"><code>--shape-rotation</code></dt>
  <dd>The angle to rotate the shape, in <code>deg</code></dd>
  <dt class="type--lower"><code>--offset</code></dt>
  <dd>How much to offset the shape, in the form of <code>(x y)</code>, from its origin. Offsets can either be a <code>px</code> value or a <code>%</code> value, with the later being a percentage of the element's respective width or height.</dd>
</dl>
<p>Shapes can also be layered on top of each other by passing in multiple values to the same property (see last example)</p>
<h2>Examples</h2>

<h3>Triangle</h3>
<pre><code>--shape: triangle;
--shape-color: var(--primary-green);
--shape-size: (50% 50%);
--shape-rotation: 10deg;
--shape-offset: (10% 10%);
</code></pre>

<div style="height: 10vh; width: 50%; --shape: triangle; --shape-color: var(--primary-green); --shape-size: (50% 50%); --shape-rotation: 10deg; --shape-offset: (0% 0%); background-image: paint(shape); border: 1px solid black">Triangle Attached</div>

<h3>Circle</h3>
<pre><code>--shape: circle;
--shape-color: var(--primary-blue);
--shape-size: (50% 50%);
--shape-rotation: 10deg;
--shape-offset: (10% 10%);
</code></pre>

<div style="height: 10vh; width: 50%; --shape: circle; --shape-color: var(--primary-blue); --shape-size: (50% 50%); --shape-rotation: 10deg; --shape-offset: (0% 0%); background-image: paint(shape); border: 1px solid black">Circle Attached</div>

<h3>Moon</h3>
<pre><code>--shape: moon;
--shape-color: var(--primary-yellow);
--shape-size: (50% 50%);
--shape-rotation: -30deg;
--shape-offset: (-2% 1%);
</code></pre>

<div style="height: 10vh; width: 50%; --shape: moon; --shape-color: var(--primary-yellow); --shape-size: (50% 50%); --shape-rotation: -30deg; --shape-offset: (-2% 1%); background-image: paint(shape); border: 1px solid black">Moon Attached</div>

<h3>Layered</h3>
<pre><code>--shape: circle, triangle, moon;
--shape-color: var(--primary-blue), var(--primary-green), var(--primary-yellow);
--shape-size: (60% 60%), (40% 40%), (30% 30%);
--shape-rotation: 0deg, 10deg, -15deg;
--shape-offset: (-2% 1%), (0% 0%), (2% 1%);
</code></pre>

<div style="height: 10vh; width: 50%; --shape: circle, triangle, moon; --shape-color: var(--primary-blue), var(--primary-green), var(--primary-yellow); --shape-size: (60% 60%), (40% 40%), (30% 30%); --shape-rotation: 0deg, 10deg, -15deg; --shape-offset: (-2% 1%), (0% 0%), (2% 1%); background-image: paint(shape); border: 1px solid black">Moon Attached</div>
