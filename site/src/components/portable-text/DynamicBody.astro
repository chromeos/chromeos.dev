---
import PortableText from './PortableText.astro';
import Message from './Message.svelte';
import Heading from './Heading.svelte';
import Picture from './Picture.svelte';
import Stats from '$components/Stats.svelte';
import Figure from './Figure.svelte';
import Link from './Link.svelte';
import Code from './Code.astro';
import YouTube from '$components/YouTube.svelte';
import Quote from './Quote.svelte';
import Table from './Table.astro';
import Footnote from './Footnote.svelte';

import { slugify } from '$lib/data';

import { microcopy as micro } from '$$sanity';
import type { Microcopy } from '$types/sanity';

const { node: props /* , isInline, class */ } = Astro.props;
const { lang } = Astro.params;
const microcopy = Object.values(micro).find(
  (m) => m._langCode === lang,
) as Microcopy;
---

{
  props._type === 'Message' || props._type === 'message' ? (
    <Message type={props.type}>
      <PortableText body={props.text} wrapped={false} />
    </Message>
  ) : props._type === 'picture' ? (
    <Picture block={props} />
  ) : props._type === 'statlist' ? (
    <Stats stats={props.stats} />
  ) : props._type === 'figure' ? (
    <Figure block={props}>
      <PortableText body={props.caption} wrapped={false} />
    </Figure>
  ) : props._type === 'code' ? (
    <Code block={props} />
  ) : props._type === 'block' &&
    (props.style === 'h2' || props.style === 'h3' || props.style === 'h4') ? (
    <Heading block={props} />
  ) : props._type === 'quote' ? (
    <Quote block={props}>
      <PortableText body={props.quote} wrapped={false} />
    </Quote>
  ) : props._type === 'youtube' ? (
    <YouTube
      id={props.id}
      alt=""
      label={microcopy.actions.loadVideo}
      client:visible
    />
  ) : props._type === 'table' ? (
    <Table block={props} />
  ) : props._type === 'break' ? (
    <br />
  ) : props._type === 'span' ? (
    <span>
      <PortableText body={props.children} wrapped={false} inline={true} />
    </span>
  ) : props._type === 'deflist' ? (
    <dl>
      {props.items.map((item) => {
        return (
          <div id={slugify(item.term)}>
            <dt>
              <PortableText body={item.term} wrapped={false} inline={true} />
            </dt>
            <dd>
              <PortableText
                body={item.definition}
                wrapped={false}
                inline={true}
              />
            </dd>
          </div>
        );
      })}
    </dl>
  ) : props.markType === 'footnote' ? (
    <Footnote block={props}>
      <PortableText body={props.children} wrapped={false} inline={true} />
    </Footnote>
  ) : props.markType === 'link' ? (
    <Link mark={props.markDef}>
      <PortableText body={props.children} wrapped={false} inline={true} />
    </Link>
  ) : props.markType === 'kbd' ? (
    <kbd>
      <PortableText body={props.children} wrapped={false} inline={true} />
    </kbd>
  ) : props.markType === 'abbreviation' ? (
    <abbr title={props.markDef.abbreviation.description}>
      <PortableText body={props.children} wrapped={false} inline={true} />
    </abbr>
  ) : (
    <PortableText body={props.children} />
  )
}
