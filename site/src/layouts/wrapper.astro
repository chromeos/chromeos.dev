---
import type { Locale } from '$types/content';
import type { Share } from '$types/sanity';

import { pwaInfo } from 'virtual:pwa-info';
import SiteHeader from '$components/SiteHeader.svelte';
import Announcement from '$components/Announcement.astro';
import SubscribeFooter from '$components/SubscribeFooter.svelte';
import Footer from '$components/Footer.astro';
import Analytics from '$components/Analytics.astro';
import ServiceWorker from '$components/ServiceWorker.svelte';
import { navigation } from '$lib/sanity';
import { getMicrocopy } from '$$microcopy';
import '$sass/global.scss';

export interface Props {
  title?: string;
  metadesc: string;
  props?: Array<{
    property: string;
    content: string;
  }>;
  locale: Locale;
  share?: Share;
}

const { title, props = [], locale, metadesc, share } = Astro.props;

// TODO: get all availabe languages for current content
const languages = [];

const nav =
  navigation.find((n) => n._langCode === locale.code) ||
  navigation.find((n) => n._langCode === 'en');
const microcopy = getMicrocopy(locale.code);
const subscribe = {
  text: microcopy.actions.subscribe,
  url: `/${locale.code}/subscribe`,
  type: 'high',
};

/**
 * Returns a localized URL for a given URL and language code.
 * @param {URL} url The URL to localize.
 * @param {string} lang The language code to localize to.
 * @return {string} The localized URL.
 */
function l10nURL(url: URL, lang: string) {
  const pth = url.pathname.split('/');
  pth[1] = lang;
  const localized = new URL(url.href);
  localized.pathname = pth.join('/');
  return localized;
}

// const microcopy = getMicrocopy(locale.code);
// Set title appropriately
const t =
  (title && title !== 'ChromeOS.dev' ? title + ' | ' : '') + 'ChromeOS.dev';
---

<!doctype html>
<html lang={locale.code} dir={locale.dir}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />

    <title>{t}</title>
    <meta name="Description" content={metadesc} />
    <meta name="theme-color" content="#1967d2" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    {pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} />}
    <link rel="icon" type="image/png" href="ix://icons/favicon.png" />
    <link rel="apple-touch-icon" href="/images/icons/pwa/icon-192x192.png" />
    <!-- Open Graph -->
    {
      share && (
        <>
          <meta property="og:title" content={share.title} />
          <meta property="og:description" content={share.description} />
          {share.image && (
            <>
              <meta property="og:image" content={share.image.image} />
              <meta property="og:image:alt" content={share.image.alt} />
            </>
          )}
        </>
      )
    }
    <meta property="og:url" content={l10nURL(Astro.url, locale.code)} />
    {
      props.map((prop) => {
        return <meta property={`og:${prop.property}`} content={prop.content} />;
      })
    }
    {
      languages
        .filter((lang) => lang !== locale.code)
        .map((lang) => {
          return (
            <link
              rel="alternate"
              hreflang={lang}
              href={l10nURL(Astro.url, lang)}
            />
          );
        })
    }
    <link rel="preconnect" href="https://www.gstatic.com" crossorigin="" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="" />
    <link rel="preconnect" href="https://fonts.googleapis.com" crossorigin="" />
    <link
      rel="preload"
      href="https://fonts.googleapis.com/css2?family=Google+Sans+Text:wght@0,400;1,400;500;0,700;1,700&family=Google+Sans:wght@400;500&family=Google+Sans+Mono:wght@400;600&display=swap"
      as="style"
    />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Google+Sans+Text:wght@0,400;1,400;500;0,700;1,700&family=Google+Sans:wght@400;500&family=Google+Sans+Mono:wght@400;600&display=swap"
    />
    <link
      rel="alternate"
      type="application/rss+xml"
      title="ChromeOS.dev"
      href={`${Astro.site}${locale.code}/rss.xml`}
    />
    <script defer src="https://www.googletagmanager.com/gtm.js?id=GTM-P2W8H6G"
    ></script>

    <script is:inline>
      // This needs to happen really quickly in the page load so we don't have a flash of unthemed content. We also can't reuse the existing theme function here because we want this inlined
      const setTheme = () => {
        let theme;

        if ('localStorage' in window) {
          theme = localStorage.getItem('theme') || null;
        }

        if (theme === null || theme === 'auto') {
          theme =
            window.matchMedia &&
            window.matchMedia('(prefers-color-scheme: dark)').matches
              ? 'dark'
              : 'light';
        }

        document.documentElement.dataset.theme = theme;
      };

      setTheme();
    </script>
  </head>
  <body id="body">
    <!-- Header -->
    <SiteHeader nav={nav} subscribe={subscribe} client:load />

    <main class="main">
      {
        microcopy.announcement && (
          <Announcement announcement={microcopy.announcement} />
        )
      }
      <slot />
    </main>

    <!-- Footer -->
    <SubscribeFooter lang={locale.code} />

    <slot name="prefooter" />

    <Footer lang={locale.code} />

    <ServiceWorker client:load />

    <Analytics />
  </body>
</html>
