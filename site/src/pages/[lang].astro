---
import { getMicrocopy } from '$$microcopy';
import Wrapper from '$layouts/wrapper.astro';
import AnimatedHero from '$components/home/AnimatedHero.svelte';
import Routing from '$components/home/Routing.svelte';
import Stats from '$components/home/Stats.svelte';
import StatsFootnote from '$components/home/StatsFootnote.svelte';
import Linux from '$components/home/Linux.svelte';
import Stories from '$components/home/Stories.svelte';
import FeaturedPost from '$components/home/FeaturedPost.svelte';
import Posts from '$components/home/Posts.svelte';
import Commercial from '$components/home/Commercial.svelte';
import Quotes from '$components/home/Quotes.svelte';
import Videos from '$components/home/Videos.svelte';
import Chromebook from '$components/home/Chromebook.svelte';
import { home, landings, stories, posts } from '$$sanity';
import '$sass/home.scss';

/**
 * Builds paths for content files
 * @return {object[]} Paths
 */
export function getStaticPaths() {
  return home
    .filter((h) => h._langCode === 'en')
    .map((h) => ({
      params: {
        lang: h._langCode,
      },
      props: {
        data: h,
        microcopy: getMicrocopy(h._langCode),
      },
    }));
}

const { microcopy, data } = Astro.props;
const { locale } = microcopy;

const {
  chromebook,
  commercial,
  hero,
  linux,
  posts: postsData,
  quotes,
  routing,
  stats,
  stories: storiesData,
  videos,
} = data;

// Get routing CTA URLs
for (const r of routing) {
  if (r.cta?.ref) {
    r.cta.url = landings.find((l) => l._id === r.cta.ref)._path;
  }
}

// Linux URL
linux.cta.url = landings.find((l) => l._id === linux.cta.ref)._path;

// Featured Stories
const featuredStories = stories.filter((s) => s.featured).slice(0, 3);

// Posts
const featuredPost = posts.filter((p) => p.featured)[0];
const feature = {
  ...featuredPost,
  cta: {
    text: microcopy.actions.more,
    url: featuredPost._path,
    type: 'medium',
  },
  theme: featuredPost.theme,
  form: 'banner',
};
feature.theme.eyebrow = microcopy.identifiers.featured;

const latestPosts = posts.filter((p) => p._id !== featuredPost._id).slice(0, 3);

// Commercial
for (const c of commercial.items) {
  c.cta.url = landings.find((l) => l._id === c.cta.ref)._path;
}
---

<Wrapper locale={locale} metadesc="" title="ChromeOS.dev">
  <div class="home">
    <AnimatedHero hero={hero} client:load />
    <Routing cards={routing} />
    <Linux linux={linux} />
    <Stats stats={stats} />

    {
      featuredStories.length > 0 && (
        <Stories
          title={storiesData.title}
          copy={storiesData.copy}
          cta={storiesData.cta}
          stories={featuredStories}
          microcopy={microcopy}
        />
      )
    }

    {featuredPost && <FeaturedPost featured={feature} />}

    {
      latestPosts.length > 0 && (
        <Posts
          title={postsData.title}
          copy={postsData.copy}
          cta={postsData.cta}
          locale={locale.code}
          microcopy={microcopy}
          posts={latestPosts}
        />
      )
    }

    <Commercial
      title={commercial.title}
      copy={commercial.copy}
      items={commercial.items}
    />

    <Quotes title={quotes.title} copy={quotes.copy} quotes={quotes.items} />

    <Chromebook chromebook={chromebook} />

    <Videos
      title={videos.title}
      videos={videos.items}
      label={microcopy.actions.loadVideo}
      client:visible
    />
  </div>

  <StatsFootnote stats={stats.items} slot="prefooter" />
  <script>
    // Import Houdini paint setup
    await import('$js/paint.js');
  </script>
</Wrapper>
