---
import countries from 'i18n-iso-countries';
import Wrapper from '$layouts/wrapper.astro';
import Input from '$components/Input.svelte';
import type { Newsletter } from '$lib/types';
import { newsletter as n, microcopy as micro } from '$lib/sanity';
import Text from '$components/Text.astro';

/**
 * Builds paths for content files
 * @return {object[]} Paths
 */
export function getStaticPaths() {
  return n
    .filter((nl) => nl._langCode === 'en')
    .map((nl) => {
      return {
        params: {
          lang: nl._langCode,
        },
        props: {
          newsletter: nl as Newsletter,
          microcopy: micro[nl._lang],
        },
      };
    });
}

const { microcopy, newsletter } = Astro.props;
const { locale } = microcopy;
const langFields = newsletter.fields;

// Merge the base English fields with the lang-specific fields
const base = n.find((nl) => nl._langCode === 'en');
let fields = structuredClone(base.fields);

for (const [i, field] of fields.entries()) {
  if (langFields[i]) {
    fields[i] = {
      ...field,
      ...langFields[i],
    };
  }
}

fields = fields.map((f) => {
  const field = {
    type: f.field.type,
    label: f?.label,
    name: f?.name,
    required: f?.required || false,
    options: f.field?.options,
    value: f?.value,
    text: null,
  };

  if (field.options) {
    field.options = field.options.map((o) => ({
      text: o,
    }));
  }

  if (field.type === 'country') {
    field.options = Object.entries(countries.getNames(locale.code)).map(
      ([code, name]) => ({ value: code, text: name }),
    );
    field.type = 'select';
  }

  if (field.type === 'submit') {
    delete field.name;
  }

  if (field.required) {
    field.text = {
      required: microcopy.actions.required,
    };
  }

  if (f.error) {
    field.text = Object.assign(field.text || {}, {
      error: f.error,
    });
  }

  return Object.fromEntries(Object.entries(field).filter(([_, v]) => v));
});

const generic = ['submit', 'button', 'radio'];
const full = ['EmailAddress'];
const subscribe = fields.find((f) => f.type === 'submit');
---

<Wrapper
  locale={locale}
  metadesc={newsletter.description}
  title={newsletter.title}
>
  <article
    class="wrapper wrapper--full-bleed wrapper--padded wrapper--padding wrapper--full-circles"
  >
    <div class="subscribe">
      <h2 class="subscribe--title type--h2">{newsletter.title}</h2>
      <p class="subscribe--copy">{newsletter.description}</p>
      {
        Object.entries(newsletter.messages).map(([type, message]) => (
          <aside
            class={`message subscribe--message subscribe--message__${type}`}
            data-type={type === 'success' ? 'tip' : type}
          >
            <p>{message}</p>
          </aside>
        ))
      }

      <form
        class="subscribe--form"
        action={base.settings.endpoint}
        id={base.settings.id}
        method="post"
        enctype="multipart/form-content"
        novalidate
      >
        {
          fields.map((field) => {
            if (!generic.includes(field.type)) {
              return <Input input={field} full={full.includes(field.name)} />;
            }
          })
        }
        <div class="subscribe--disclaimer type type--small">
          <Text body={newsletter.disclaimer} wrapped={false} inline={true} />
        </div>
        <button class="subscribe--submit cta cta--high" type="submit"
          >{subscribe.value}</button
        >
      </form>
    </div>
  </article>
</Wrapper>

<style lang="scss">
  .subscribe {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    max-width: 75ch;
    margin-inline: auto;

    .message {
      display: none;
    }

    &--title,
    &--copy {
      text-align: center;
    }

    &--copy {
      font-size: 1.125rem;
    }

    &--form {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(min(100%, 25ch), 1fr));
      gap: 1rem;
      margin-top: 1.5rem;
    }

    &--disclaimer {
      grid-column: 1 / -1;
    }

    &--submit {
      max-width: min-content;

      &[disabled] {
        opacity: 0.5;
      }
    }
  }
</style>

<script>
  // Paint the circles
  import '$js/paint.js';

  // Manage the form
  import { Form } from '$js/form.ts';

  new Form(
    '.subscribe--form',
    '.message--warning',
    '.message--tip',
    '.message--note',
  );
</script>
